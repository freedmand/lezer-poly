// The Poly grammar specification in Lezer
//
// Note: special documentation comments are used to generate AST
// forming code. See ../grammarConvert/grammarConvert.ts for details.

@precedence { unary @right, times @left, plus @left, comparison @left, equals @left, dictionary @cut }

@top Program { /** Statement[] */ statement* }

// Statements
statement[@isGroup=Statement] {
  /** | */
  DeclareStatement |
  DeclareTypeStatement |
  AssignStatement |
  PlusAssignStatement |
  MinusAssignStatement |
  TimesAssignStatement |
  DivideAssignStatement |
  BlockStatement |
  IfStatement |
  ForStatement |
  ExpressionStatement |
  FunctionStatement |
  ReturnStatement
}

DeclareStatement {
  /** (let|var) Identifier TypeExpression? = Expression */
  makeStatement<(keyword<"let"> | keyword<"var">) Identifier optionalType "=" Expression>
}

DeclareTypeStatement {
  /** type TypeIdentifier TypeExpression? = TypeExpression */
  makeStatement<keyword<"type"> TypeIdentifier optionalType "=" TypeExpression>
}

AssignStatement {
  /** Identifier = Expression */
  makeAssignStatement<"=">
}

PlusAssignStatement {
  /** Identifier += Expression */
  makeAssignStatement<"+=">
}

MinusAssignStatement {
  /** Identifier -= Expression */
  makeAssignStatement<"-=">
}

TimesAssignStatement {
  /** Identifier *= Expression */
  makeAssignStatement<"*=">
}

DivideAssignStatement {
  /** Identifier /= Expression */
  makeAssignStatement<"/=">
}

BlockStatement {
  /** { Statement[] } */
  "{" statement* "}"
}

FunctionStatement {
  /** fn Identifier ( Param[] ) TypeExpression? BlockStatement */
  keyword<"fn"> Identifier "(" params ")" optionalReturnType BlockStatement
}

ReturnStatement {
  /** return Expression? */
  makeStatement<keyword<"return"> Expression?>
}

IfStatement {
  /** if Expression BlockStatement */
  keyword<"if"> Expression BlockStatement
}

ForStatement {
  /** for Expression in Expression BlockStatement */
  keyword<"for"> Expression keyword<"in"> Expression BlockStatement
}

ExpressionStatement {
  /** Expression */
  makeStatement<Expression>
}

// Expressions
Expression {
  /** | */
  Identifier | Number | String | BinaryExpression | GroupExpression |
  Negate | MemberExpression | CallExpression | ListExpression | DictionaryExpression
}

ListExpression {
  /** [ Expression[] ] */
  "[" commaSep<Expression> "]"
}

DictionaryExpression {
  /** { DictionaryItem[] } */
  !dictionary "{" commaSep<DictionaryItem> "}"
}

DictionaryItem {
  /** Identifier :? Expression? */
  Identifier (":" Expression)?
}

MemberExpression {
  /** Expression . Identifier */
  Expression "." Identifier
}

CallExpression {
  /** Expression ( Arg[] ) */
  Expression "(" args ")"
}

GroupExpression {
  /** ( Expression ) */
  "(" Expression ")"
}

BinaryExpression {
  /** | */
  PlusExpression | MinusExpression | TimesExpression | DivideExpression |
  EqualityExpression | InequalityExpression | GreaterThanExpression | LessThanExpression | GreaterThanOrEqualExpression | LessThanOrEqualExpression
}

PlusExpression {
  /** Expression + Expression */
  Expression !plus "+" Expression
}

MinusExpression {
  /** Expression - Expression */
  Expression !plus "-" Expression
}

TimesExpression {
  /** Expression * Expression */
  Expression !times "*" Expression
}

DivideExpression {
  /** Expression / Expression */
  Expression !times Divide Expression
}

EqualityExpression {
  /** Expression == Expression */
  Expression !equals "==" Expression
}

InequalityExpression {
  /** Expression != Expression */
  Expression !equals "!=" Expression
}

GreaterThanExpression {
  /** Expression > Expression */
  Expression !comparison ">" Expression
}

LessThanExpression {
  /** Expression < Expression */
  Expression !comparison "<" Expression
}

GreaterThanOrEqualExpression {
  /** Expression >= Expression */
  Expression !comparison ">=" Expression
}

LessThanOrEqualExpression {
  /** Expression <= Expression */
  Expression !comparison "<=" Expression
}

Negate {
  /** - Expression */
  !unary "-" Expression
}

// Types
TypeExpression {
  /** | */
  TypeIdentifier | Number | String | UnionType
}

UnionType {
  /** TypeExpression | TypeExpression */
  (TypeExpression !plus "|" TypeExpression)
}

// Miscellaneous
Param {
  /** Identifier TypeExpression? Expression? */
  Identifier optionalType optionalDefault
}

Arg {
  /** Identifier? =? Expression */
  (Identifier "=")? Expression
}

optionalType {
  (":" TypeExpression)?
}

optionalReturnType {
  ("->" TypeExpression)?
}

optionalDefault {
  ("=" Expression)?
}

params {
  commaSep<Param>
}

args {
  commaSep<Arg>
}

// Skip / strings
@skip {
  whitespace | Comment | DocComment
}

@skip {} {
  String {
    /** " StringChunk[] " */
    '"' StringChunk* '"'
  }
}

StringChunk {
  /** | */
  StringContent | Template
}

StringContent {
  /** . */
  char
}

Template {
  /** \[ Expression ] */
  "\\[" Expression "]"
}

// Utils
makeStatement<content> { content ";" }
makeAssignStatement<operator> { makeStatement<Identifier operator Expression> }
commaSep1<item> { item ("," item)* }
commaSep<item> { commaSep1<item>? }
keyword<content> { @specialize[@name={content}]<Identifier, content> }

@tokens {
  Identifier { /** . */ "@"? @asciiLetter+ }
  TypeIdentifier { /** . */ "@"? @asciiLetter+ }
  Number { /** . */ @digit+ }
  Divide { "/" }
  Comment {
    "//" ![\n]*
  }
  DocComment {
    "///" ![\n]*
  }
  whitespace { @whitespace+ }
  char { ($[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc)+ }
  esc  { $["\\\/bfnrt] | "u" hex hex hex hex }
  hex  { $[0-9a-fA-F] }
  "+" "-" "*" "/" "[" "]" "{" "}" "\\["
  @precedence { DocComment, Comment, Divide }
}

@external propSource polyHighlighting from "../grammar/propSource.js"
