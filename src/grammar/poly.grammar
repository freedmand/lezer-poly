@precedence { negative @right, times @left, plus @left }

@top Program { /** Statement[] */ statement* }

Block {
  /** { Statement[] } */
  "{" statement* "}"
}

statement[@isGroup=Statement] {
  /** | */
  DeclareStatement |
  ExpressionStatement |
  FunctionStatement |
  ReturnStatement
}

optionalType {
  (":" TypeExpression)?
}

DeclareStatement {
  /** let Identifier TypeExpression? = Expression */
  makeStatement<keyword<"let"> Identifier optionalType "=" Expression>
}

FunctionStatement {
  /** fn Identifier ( Arg[] ) Block */
  keyword<"fn"> Identifier "(" args ")" Block
}

ReturnStatement {
  /** return Expression? */
  makeStatement<keyword<"return"> Expression?>
}

args {
  commaSep<Arg>
}

Arg {
  /** Identifier TypeExpression? */
  Identifier optionalType
}

commaSep1<item> { item ("," item)* }
commaSep<item> { commaSep1<item>? }

TypeExpression {
  /** | */
  Identifier | Number | String | UnionType
}

UnionType {
  /** TypeExpression | TypeExpression */
  (TypeExpression !plus "|" TypeExpression)
}

ExpressionStatement {
  /** Expression */
  makeStatement<Expression>
}

@skip {
  whitespace
}

@skip {} {
  String {
    /** " StringChunk[] " */
    '"' StringChunk* '"'
  }
}

StringChunk {
  /** | */
  StringContent | Template
}

StringContent {
  /** . */
  char
}

Template {
  /** \[ Expression ] */
  "\\[" Expression "]"
}

Expression {
  /** | */
  Identifier | Number | String | BinaryExpression | GroupExpression |
  Negate
}

GroupExpression {
  /** ( Expression ) */
  "(" Expression ")"
}

BinaryExpression {
  /** | */
  PlusExpression | MinusExpression | TimesExpression | DivideExpression
}

PlusExpression {
  /** Expression + Expression */
  Expression !plus "+" Expression
}

MinusExpression {
  /** Expression - Expression */
  Expression !plus "-" Expression
}

TimesExpression {
  /** Expression * Expression */
  Expression !times "*" Expression
}

DivideExpression {
  /** Expression / Expression */
  Expression !times "/" Expression
}

Negate {
  /** - Expression */
  !negative "-" Expression
}

makeStatement<content> { content ";" }

keyword<content> { @specialize[@name={content}]<Identifier, content> }

@tokens {
  Identifier { /** . */ @asciiLetter+ }
  Number { /** . */ @digit+ }
  whitespace { @whitespace+ }
  char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc  { $["\\\/bfnrt] | "u" hex hex hex hex }
  hex  { $[0-9a-fA-F] }
  "+" "-" "*" "/" "[" "]" "{" "}" "\\["
}

@external propSource polyHighlighting from "../grammar/propSource"
